package odoo

// {{.StructName}} represents {{ .Name }} model.
type {{.StructName}} struct { {{range .Fields}}
	{{.VarName}} {{.Type}} `xmlrpc:"{{.Name}},omitempty"`{{end }}
}

// {{.StructName}}s represents array of {{ .Name }} model.
type {{.StructName}}s []{{.StructName}}

// {{.StructName}}Model is the odoo model name.
const {{.StructName}}Model = "{{ .Name }}"

// Many2One convert {{.StructName}} to *Many2One.
func ({{.VarName}} *{{.StructName}}) Many2One() *Many2One {
	return NewMany2One({{.VarName}}.Id.Get(), "")
}

// Create{{.StructName}} creates a new {{ .Name }} model and returns its id.
func (c *Client) Create{{.StructName}}({{.VarName}} *{{.StructName}}) (int64, error) {
	ids, err := c.Create{{.StructName}}s([]*{{.StructName}}{ {{.VarName}} })
	if err != nil {
		return -1, err
	}
	if len(ids) == 0 {
		return -1, nil
	}
	return ids[0], nil
}

// Create{{.StructName}} creates a new {{ .Name }} model and returns its id.
func (c *Client) Create{{.StructName}}s({{.VarName}}s []*{{.StructName}}) ([]int64, error) {
	var vv []interface{}
	for _, v := range {{.VarName}}s {
		vv = append(vv, v)
	}
	return c.Create({{.StructName}}Model, vv, nil)
}

// Update{{.StructName}} updates an existing {{ .Name }} record.
func (c *Client) Update{{.StructName}}({{.VarName}} *{{.StructName}}) error {
	return c.Update{{.StructName}}s([]int64{ {{.VarName}}.Id.Get() }, {{.VarName}})
}

// Update{{.StructName}}s updates existing {{ .Name }} records.
// All records (represented by ids) will be updated by {{.VarName}} values.
func (c *Client) Update{{.StructName}}s(ids []int64, {{.VarName}} *{{.StructName}}) error {
	return c.Update({{.StructName}}Model, ids, {{.VarName}}, nil)
}

// Delete{{.StructName}} deletes an existing {{ .Name }} record.
func (c *Client) Delete{{.StructName}}(id int64) error {
	return c.Delete{{.StructName}}s([]int64{id})
}

// Delete{{.StructName}}s deletes existing {{ .Name }} records.
func (c *Client) Delete{{.StructName}}s(ids []int64) error {
	return c.Delete({{.StructName}}Model, ids)
}

// Get{{.StructName}} gets {{ .Name }} existing record.
func (c *Client) Get{{.StructName}}(id int64) (*{{.StructName}}, error) {
	{{.VarsName}}, err := c.Get{{.StructName}}s([]int64{id})
	if err != nil {
		return nil, err
	}
	return &((*{{.VarsName}})[0]), nil
}

// Get{{.StructName}}s gets {{ .Name }} existing records.
func (c *Client) Get{{.StructName}}s(ids []int64) (*{{.StructName}}s, error) {
	{{.VarsName}} := &{{.StructName}}s{}
	if err := c.Read({{.StructName}}Model, ids, nil, {{.VarsName}}); err != nil {
		return nil, err
	}
	return {{.VarsName}}, nil
}

// Find{{.StructName}} finds {{ .Name }} record by querying it with criteria.
func (c *Client) Find{{.StructName}}(criteria *Criteria) (*{{.StructName}}, error) {
	{{.VarsName}} := &{{.StructName}}s{}
	if err := c.SearchRead({{.StructName}}Model, criteria, NewOptions().Limit(1), {{.VarsName}}); err != nil {
		return nil, err
	}
	return &((*{{.VarsName}})[0]), nil
}

// Find{{.StructName}}s finds {{ .Name }} records by querying it
// and filtering it with criteria and options.
func (c *Client) Find{{.StructName}}s(criteria *Criteria, options *Options) (*{{.StructName}}s, error) {
	{{.VarsName}} := &{{.StructName}}s{}
	if err := c.SearchRead({{.StructName}}Model, criteria, options, {{.VarsName}}); err != nil {
		return nil, err
	}
	return {{.VarsName}}, nil
}

// Find{{.StructName}}Ids finds records ids by querying it
// and filtering it with criteria and options.
func (c *Client) Find{{.StructName}}Ids(criteria *Criteria, options *Options) ([]int64, error) {
	return c.Search({{.StructName}}Model, criteria, options)
}

// Find{{.StructName}}Id finds record id by querying it with criteria.
func (c *Client) Find{{.StructName}}Id(criteria *Criteria, options *Options) (int64, error) {
	ids, err := c.Search({{.StructName}}Model, criteria, options)
	if err != nil {
		return -1, err
	}
	return ids[0], nil
}
